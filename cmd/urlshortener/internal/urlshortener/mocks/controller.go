// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	urls "url-shortener/pkg/repository/firestore/urls"

	firestore "cloud.google.com/go/firestore"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddURLTx mocks base method.
func (m *MockRepository) AddURLTx(tx *firestore.Transaction, id string, url urls.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURLTx", tx, id, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURLTx indicates an expected call of AddURLTx.
func (mr *MockRepositoryMockRecorder) AddURLTx(tx, id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLTx", reflect.TypeOf((*MockRepository)(nil).AddURLTx), tx, id, url)
}

// GetByShortURL mocks base method.
func (m *MockRepository) GetByShortURL(ctx context.Context, shortURL string) (urls.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, shortURL)
	ret0, _ := ret[0].(urls.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockRepositoryMockRecorder) GetByShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockRepository)(nil).GetByShortURL), ctx, shortURL)
}

// GetDocIDByLongURL mocks base method.
func (m *MockRepository) GetDocIDByLongURL(ctx context.Context, longURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocIDByLongURL", ctx, longURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocIDByLongURL indicates an expected call of GetDocIDByLongURL.
func (mr *MockRepositoryMockRecorder) GetDocIDByLongURL(ctx, longURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocIDByLongURL", reflect.TypeOf((*MockRepository)(nil).GetDocIDByLongURL), ctx, longURL)
}

// RunTransaction mocks base method.
func (m *MockRepository) RunTransaction(ctx context.Context, txFunc func(context.Context, *firestore.Transaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, txFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockRepositoryMockRecorder) RunTransaction(ctx, txFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockRepository)(nil).RunTransaction), ctx, txFunc)
}

// MockCounter is a mock of Counter interface.
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter.
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance.
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// GetCountTx mocks base method.
func (m *MockCounter) GetCountTx(tx *firestore.Transaction) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountTx", tx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountTx indicates an expected call of GetCountTx.
func (mr *MockCounterMockRecorder) GetCountTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountTx", reflect.TypeOf((*MockCounter)(nil).GetCountTx), tx)
}

// IncrementCounterTx mocks base method.
func (m *MockCounter) IncrementCounterTx(tx *firestore.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCounterTx", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementCounterTx indicates an expected call of IncrementCounterTx.
func (mr *MockCounterMockRecorder) IncrementCounterTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounterTx", reflect.TypeOf((*MockCounter)(nil).IncrementCounterTx), tx)
}

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// EncodeToBase62 mocks base method.
func (m *MockEncoder) EncodeToBase62(number uint64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeToBase62", number)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncodeToBase62 indicates an expected call of EncodeToBase62.
func (mr *MockEncoderMockRecorder) EncodeToBase62(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeToBase62", reflect.TypeOf((*MockEncoder)(nil).EncodeToBase62), number)
}
